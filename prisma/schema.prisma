generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Product {
  id          String              @id
  title       String
  description String?
  vendor      String?
  productType String?
  status      String
  handle      String
  createdAt   DateTime
  updatedAt   DateTime
  imageUrl    String?
  syncedAt    DateTime            @default(now())
  orders      Order[]
  collections ProductCollection[]
  rankings    ProductRanking[]
  variants    ProductVariant[]
}

model ProductVariant {
  id        String   @id
  productId String
  sku       String?
  price     Float
  title     String
  inventory Int
  createdAt DateTime
  updatedAt DateTime
  syncedAt  DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  productId    String
  purchaseDate DateTime
  quantity     Int
  product      Product  @relation(fields: [productId], references: [id])

  @@id([productId, purchaseDate])
}

model ProductRanking {
  id               String   @id @default(cuid())
  productId        String
  score            Float
  conversionScore  Float
  aovScore         Float
  sellThroughScore Float
  trafficScore     Float
  updatedAt        DateTime @default(now())
  product          Product  @relation(fields: [productId], references: [id])

  @@unique([productId, updatedAt])
  @@index([score])
}

model Collection {
  id        String              @id
  title     String
  handle    String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now())
  products  ProductCollection[]
}

model ProductCollection {
  productId    String
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])

  @@id([productId, collectionId])
}
